pipeline {
    options {
        ansiColor('xterm')
        disableConcurrentBuilds()
    }
    agent { label 'dynamic' }
    parameters {
        string(
            name:'BRANCH',
            description:'Which git branch do you want to use?',
            defaultValue: 'TAG-1234'
        )
        choice(
            name:'SPACE',
            description:'For which space do you want to create the Docker images?',
            choices: ['none', 'develop', 'qa', 'integration', 'production']
        )
        string(
            name:'SERVICE',
            description:'Which service do you want to select? (if you want to put more than one, just separate them with a space eg. app1 app2/code)',
            defaultValue: 'all'
        )
    }
    environment {
        NPM_TOKEN = credentials('')
        BRANCH = "${params.BRANCH}"
        SPACE = "${params.SPACE}"
        SERVICE = "${params.SERVICE}"
        ORG = ""
        PRODUCT = ""
        PIPELINE = "docker"
    }
    stages {
        stage('Defying AWS account') {
            steps {
                script {
                    if (env.SPACE == 'develop') {
                        echo "Specific variables for $SPACE are selected"
                        env.ENVPASS = "dev-aws"
                        env.ACCOUNT = '---.ecr.eu-central-1.amazonaws.com'
                    } else if (env.SPACE == 'qa') {
                        echo "Specific variables for $SPACE are selected"
                        env.ENVPASS = "qa-aws"
                        env.ACCOUNT = '---.ecr.eu-central-1.amazonaws.com'
                        exit 1
                    } else if (env.SPACE == 'integration') {
                        echo "Specific variables for $SPACE are selected"
                        env.ENVPASS = "int-aws"
                        env.ACCOUNT = '---.ecr.eu-central-1.amazonaws.com'
                        exit 1
                    } else if (env.SPACE == 'production') {
                        echo "Specific variables for $SPACE are selected"
                        env.ENVPASS = "prod-aws"
                        env.ACCOUNT = '---.ecr.eu-central-1.amazonaws.com'
                        exit 1
                    } else {
                        echo "$SPACE not found"
                        exit 1
                    }
                }
            }
        }
        stage('Downloading the repository') {
            steps {
                dir('repo') {
                    git branch: "$BRANCH", url: "ssh://git@bitbucket.company.com/project/repository-name.git", credentialsId: ''
                }
            }
        }
        stage('Creating and pushing Docker Images') {
            steps {
                dir('repo') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "$ENVPASS", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh 'chmod 777 ../$PIPELINE/$PIPELINE-$PRODUCT.sh; ../$PIPELINE/$PIPELINE-$PRODUCT.sh'
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.result = 'SUCCESS'
                sh 'git clean -xdf'
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
                sh 'git clean -xdf'
            }
        }
    }
}
